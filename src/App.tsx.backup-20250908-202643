import { lazy, Suspense } from 'react';
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import { ErrorBoundary } from "@/components/ErrorBoundary";
import { ClerkProvider } from "@clerk/clerk-react";
import { StripeProvider } from "@/components/payments/StripeProvider";

// Loading component for lazy-loaded pages
const PageLoader = () => (
  <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-orange-50 to-white">
    <div className="text-center space-y-4">
      <div className="w-16 h-16 border-4 border-orange-500 border-t-transparent rounded-full animate-spin mx-auto" />
      <p className="text-gray-600 animate-pulse">Loading...</p>
    </div>
  </div>
);

// Core pages (loaded immediately)
import Index from "./pages/Index";
import Events from "./pages/Events";
import SignInPage from "./pages/auth/SignInPage";
import SignUpPage from "./pages/auth/SignUpPage";

// Import dashboards directly to avoid lazy loading issues
import OrganizerDashboardDemo from "./pages/OrganizerDashboardDemo";
import OrganizerDashboardNew from "./pages/OrganizerDashboardNew";
import UserDashboardNew from "./pages/UserDashboardNew";
import SponsorDashboardNew from "./pages/SponsorDashboardNew";
import DesignerDashboard from "./pages/DesignerDashboard";
import ModelDashboard from "./pages/ModelDashboard";
import VenueDashboard from "./pages/VenueDashboard";
import Venues from "./pages/Venues";

const PublicDashboard = lazy(() => import("./pages/PublicDashboard"));
// Lazy load all other pages
const EventDetail = lazy(() => import("./pages/EventDetail"));
const Designers = lazy(() => import("./pages/Designers"));
const DesignerProfile = lazy(() => import("./pages/DesignerProfile"));
const Tickets = lazy(() => import("./pages/Tickets"));
const Sponsors = lazy(() => import("./pages/Sponsors"));
const About = lazy(() => import("./pages/About"));
const Contact = lazy(() => import("./pages/Contact"));

// Lazy load dashboards (admin only)
const Dashboard = lazy(() => import("./pages/admin/Dashboard"));
const DashboardDev = lazy(() => import("./pages/admin/DashboardDev"));
const LeapDashboard = lazy(() => import("./pages/LeapDashboard").then(m => ({ default: m.LeapDashboard })));
const EnhancedDashboard = lazy(() => import("./pages/EnhancedDashboard").then(m => ({ default: m.EnhancedDashboard })));

// Lazy load admin pages
const CreateEvent = lazy(() => import("./pages/admin/CreateEvent"));
const AddSponsor = lazy(() => import("./pages/admin/AddSponsor"));
const Production = lazy(() => import("./pages/admin/Production"));
const GroupBooking = lazy(() => import("./pages/admin/GroupBooking"));
const Analytics = lazy(() => import("./pages/admin/Analytics"));
const EventPlans = lazy(() => import("./pages/admin/EventPlans"));
const PortfolioUpload = lazy(() => import("./pages/admin/PortfolioUpload"));
const CollectionManager = lazy(() => import("./pages/admin/CollectionManager"));
const VenuePhotos = lazy(() => import("./pages/admin/VenuePhotos"));
const VenueAvailability = lazy(() => import("./pages/admin/VenueAvailability"));
const Gallery = lazy(() => import("./pages/admin/Gallery"));

// Lazy load test pages
const TestAuth = lazy(() => import("./pages/TestAuth"));
const CompleteIntegrationTest = lazy(() => import("./pages/CompleteIntegrationTest"));
const TestDirectAuth = lazy(() => import("./pages/TestDirectAuth"));
const StripeTestPage = lazy(() => import("./pages/StripeTestPage"));

// Create QueryClient with proper configuration
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 1,
      refetchOnWindowFocus: false,
      staleTime: 5 * 60 * 1000, // 5 minutes
      cacheTime: 10 * 60 * 1000, // 10 minutes
    },
  },
});

// Get Clerk publishable key
const clerkPubKey = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY;

if (!clerkPubKey) {
  throw new Error("Missing Clerk Publishable Key");
}

const App = () => {
  return (
    <ErrorBoundary>
      <ClerkProvider publishableKey={clerkPubKey}>
        <StripeProvider>
          <QueryClientProvider client={queryClient}>
            <TooltipProvider>
              <Toaster />
              <Sonner />
              <BrowserRouter>
                <Suspense fallback={<PageLoader />}>
                  <Routes>
                {/* Public routes - Core pages loaded immediately */}
                <Route path="/" element={<Index />} />
                <Route path="/events" element={<Events />} />
                <Route path="/sign-in" element={<SignInPage />} />
                <Route path="/sign-up" element={<SignUpPage />} />
                
                {/* Lazy loaded public routes */}
                                <Route path="/public-dashboard" element={<PublicDashboard />} />
                <Route path="/events/:id" element={<EventDetail />} />
                <Route path="/designers" element={<Designers />} />
                <Route path="/designers/:id" element={<DesignerProfile />} />
                <Route path="/tickets" element={<Tickets />} />
                <Route path="/sponsors" element={<Sponsors />} />
                <Route path="/about" element={<About />} />
                <Route path="/contact" element={<Contact />} />
                <Route path="/venues" element={<Venues />} />
                
                {/* Admin routes - Protected and lazy loaded */}
                <Route path="/admin" element={<Dashboard />} />
                <Route path="/admin/dashboard" element={<Dashboard />} />
                <Route path="/admin/dashboard-dev" element={<DashboardDev />} />
                <Route path="/admin/create-event" element={<CreateEvent />} />
                <Route path="/admin/add-sponsor" element={<AddSponsor />} />
                <Route path="/admin/production" element={<Production />} />
                <Route path="/admin/group-booking" element={<GroupBooking />} />
                <Route path="/admin/analytics" element={<Analytics />} />
                <Route path="/admin/event-plans" element={<EventPlans />} />
                <Route path="/admin/portfolio-upload" element={<PortfolioUpload />} />
                <Route path="/admin/collection-manager" element={<CollectionManager />} />
                <Route path="/admin/venue-photos" element={<VenuePhotos />} />
                <Route path="/admin/venue-availability" element={<VenueAvailability />} />
                <Route path="/admin/gallery" element={<Gallery />} />
                
                {/* Main Dashboard Routes - Using Original Dashboards with Supabase */}
                <Route path="/dashboard" element={<OrganizerDashboardDemo />} />
                <Route path="/organizer-dashboard" element={<OrganizerDashboardNew />} />
                <Route path="/user-dashboard" element={<UserDashboardNew />} />
                <Route path="/sponsor-dashboard" element={<SponsorDashboardNew />} />
                <Route path="/designer-dashboard" element={<DesignerDashboard />} />
                <Route path="/model-dashboard" element={<ModelDashboard />} />
                <Route path="/venue-dashboard" element={<VenueDashboard />} />
                
                {/* Admin Routes */}
                <Route path="/admin/organizer" element={<OrganizerDashboardDemo />} />
                <Route path="/admin/user" element={<UserDashboardNew />} />
                <Route path="/admin/sponsor" element={<SponsorDashboardNew />} />
                <Route path="/admin/designer" element={<DesignerDashboard />} />
                <Route path="/admin/model" element={<ModelDashboard />} />
                <Route path="/admin/venue" element={<VenueDashboard />} />
                
                {/* Preview Routes for Testing */}
                <Route path="/preview/organizer" element={<OrganizerDashboardDemo />} />
                <Route path="/preview/user" element={<UserDashboardNew />} />
                <Route path="/preview/sponsor" element={<SponsorDashboardNew />} />
                <Route path="/preview/designer" element={<DesignerDashboard />} />
                <Route path="/preview/model" element={<ModelDashboard />} />
                <Route path="/preview/venue" element={<VenueDashboard />} />
                <Route path="/preview/analytics" element={<Analytics />} />
                
                {/* Additional Dashboard Variations */}
                <Route path="/dashboard/enhanced" element={<EnhancedDashboard />} />
                <Route path="/leap-dashboard" element={<LeapDashboard />} />
                
                {/* Test routes - Lazy loaded */}
                <Route path="/test-auth" element={<TestAuth />} />
                <Route path="/test-integration" element={<CompleteIntegrationTest />} />
                <Route path="/test-direct-auth" element={<TestDirectAuth />} />
                <Route path="/test-stripe" element={<StripeTestPage />} />
                
                {/* Fallback */}
                <Route path="*" element={<Navigate to="/" replace />} />
              </Routes>
            </Suspense>
          </BrowserRouter>
        </TooltipProvider>
      </QueryClientProvider>
    </StripeProvider>
  </ClerkProvider>
</ErrorBoundary>
);
};

export default App;
